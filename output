Running query server specs for javascript query server

query server normal case
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["reset"]
got: true
- should reset
run: ["ddoc","new","foo",{"_id":"foo","shows":{"simple":"          function(doc, req) {\n              log(\"ok\");\n              return [doc.title, doc.body].join(' - ');\n          }\n"}}]
got: true
run: ["reset"]
got: true
run: ["ddoc","foo",["shows","simple"],[{"title":"Best ever","body":"Doc body"},{}]]
got: ["log","ok"]
log: ok
got: ["resp",{"body":"Best ever - Doc body"}]
- should not erase ddocs on reset
run: ["reset"]
got: true
run: ["add_fun","function(doc){emit(\"foo\",doc.a); emit(\"bar\",doc.a); return 1;}"]
got: true
run: ["add_fun","          function(doc){\n            emit(\"baz\",doc.a)\n          }\n"]
got: true
run: ["map_doc",{"a":"b"}]
got: [[["foo","b"],["bar","b"]], [["baz","b"]]]
- should run map funs
run: ["reset"]
got: true
run: ["add_fun","      function(doc) {\n       emit(x,doc)\n      }\n"]
got: true
run: ["add_fun","          function(doc){\n            emit(\"baz\",doc.a)\n          }\n"]
got: true
run: ["map_doc",{"a":"b"}]
got: ["log","function raised exception (new ReferenceError(\"x is not defined\", \"\", 1)) with doc._id undefined"]
log: function raised exception (new ReferenceError("x is not defined", "", 1)) with doc._id undefined
got: [[], [["baz","b"]]]
- should return empty if map terminates abnormally

query server normal case reduce
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["reset"]
got: true
run: ["reduce",["function(keys, values, rereduce) { return values.length; }"],[[0,0],[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16],[9,18]]]
got: [true,[10]]
- should reduce

query server normal case rereduce
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["reset"]
got: true
run: ["rereduce",["function(keys, values, rereduce) { return sum(values); }"],[0,1,2,3,4,5,6,7,8,9]]
got: [true,[45]]
- should rereduce

query server normal case design docs
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["reset"]
got: true
run: ["ddoc","new","foo",{"_id":"foo"}]
got: true
- should learn design docs

query server normal case validation
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","validate_doc_update":"          function(newDoc, oldDoc, userCtx) {\n            if(newDoc.bad)\n              throw({forbidden:\"bad doc\"}); \"foo bar\";\n          }\n"}]
got: true
run: ["ddoc","foo",["validate_doc_update"],[{"good":true},{},{}]]
got: 1
- should allow good updates
run: ["ddoc","foo",["validate_doc_update"],[{"bad":true},{},{}]]
got: {"forbidden":"bad doc"}
- should reject invalid updates

query server normal case show
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","shows":{"simple":"          function(doc, req) {\n              log(\"ok\");\n              return [doc.title, doc.body].join(' - ');\n          }\n"}}]
got: true
run: ["ddoc","foo",["shows","simple"],[{"title":"Best ever","body":"Doc body"},{}]]
got: ["log","ok"]
log: ok
got: ["resp",{"body":"Best ever - Doc body"}]
- should show

query server normal case show with errors
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","shows":{"error":"          function(doc,req) {\n            return {\n          }\n"}}]
got: true
run: ["ddoc","foo",["shows","error"],[{"title":"Best ever","body":"Doc Body"},{}]]
got: ["error","compilation_error","Expression does not eval to a function. ((new String(\"          function(doc,req) {\\n            return {\\n          }\\n\")))"]
- should return the error

query server normal case show with headers
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","shows":{"headers":"          function(doc, req) {\n            var resp = {\"code\":200, \"headers\":{\"X-Plankton\":\"Rusty\"}};\n            resp.body = [doc.title, doc.body].join(' - ');\n            return resp;\n          }\n"}}]
got: true
run: ["ddoc","foo",["shows","headers"],[{"title":"Best ever","body":"Doc body"},{}]]
got: ["resp",{"code":200,"headers":{"X-Plankton":"Rusty"},"body":"Best ever - Doc body"}]
- should show headers

query server normal case recoverable error
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","shows":{"error":"      function() {\n        throw([\"error\",\"error_key\",\"testing\"]);\n      }\n"}}]
got: true
run: ["ddoc","foo",["shows","error"],[{"foo":"bar"},{"q":"ok"}]]
got: ["error","error_key","testing"]
run: ["reset"]
got: true
- should not exit

query server normal case changes filter
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","filters":{"basic":"        function(doc, req) {\n          if (doc.good) {\n            return true;\n          }\n        }\n"}}]
got: true
run: ["ddoc","foo",["filters","basic"],[[{"key":"bam","good":true},{"foo":"bar"},{"good":true}],{"req":"foo"}]]
got: [true,[true,false,true]]
- should only return true for good docs

query server normal case update
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","updates":{"basic":"      function(doc, req) {\n        doc.world = \"hello\";\n        var resp = [doc, \"hello doc\"];\n        return resp;\n      }\n"}}]
got: true
run: ["ddoc","foo",["updates","basic"],[{"foo":"gnarly"},{"method":"POST"}]]
got: ["up",{"foo":"gnarly","world":"hello"},{"body":"hello doc"}]
- should return a doc and a resp body

query server normal case ddoc list
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"simple":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"early\";\n          };\n","headers":"          function(head, req) {\n            start({headers:{\"Content-Type\" : \"text\/plain\"}});\n            send(\"first chunk\");\n            send('second \"chunk\"');\n            return \"tail\";\n          };\n","rows":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n","buffer-chunks":"          function(head, req) {\n            send(\"bacon\");\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n              send(\"eggs\");\n            };\n            return \"tail\";\n          };\n","chunky":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row, i=0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early tail');\n              }\n            };\n          };\n"}}]
got: true
run: ["ddoc","foo",["lists","chunky"],[{"foo":"bar"},{"q":"ok"}]]
got: ["start",["first chunk","ok"],{"headers":{}}]
run: ["list_row",{"key":"baz"}]
got: ["chunks",["baz"]]
run: ["list_row",{"key":"bam"}]
got: ["chunks",["bam"]]
run: ["list_row",{"key":"foom"}]
got: ["end",["foom","early tail"]]
run: ["reset"]
got: true
- should end after 2

query server normal case ddoc list example list
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"simple":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"early\";\n          };\n","headers":"          function(head, req) {\n            start({headers:{\"Content-Type\" : \"text\/plain\"}});\n            send(\"first chunk\");\n            send('second \"chunk\"');\n            return \"tail\";\n          };\n","rows":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n","buffer-chunks":"          function(head, req) {\n            send(\"bacon\");\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n              send(\"eggs\");\n            };\n            return \"tail\";\n          };\n","chunky":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row, i=0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early tail');\n              }\n            };\n          };\n"}}]
got: true
run: ["ddoc","foo",["lists","simple"],[{"foo":"bar"},{"q":"ok"}]]
got: ["start",["first chunk","ok"],{"headers":{}}]
run: ["list_row",{"key":"baz"}]
got: ["chunks",["baz"]]
run: ["list_row",{"key":"bam"}]
got: ["chunks",["bam"]]
run: ["list_row",{"key":"foom"}]
got: ["chunks",["foom"]]
run: ["list_row",{"key":"fooz"}]
got: ["chunks",["fooz"]]
run: ["list_row",{"key":"foox"}]
got: ["chunks",["foox"]]
run: ["list_end"]
got: ["end",["early"]]
- should run normal

query server normal case ddoc list headers
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"simple":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"early\";\n          };\n","headers":"          function(head, req) {\n            start({headers:{\"Content-Type\" : \"text\/plain\"}});\n            send(\"first chunk\");\n            send('second \"chunk\"');\n            return \"tail\";\n          };\n","rows":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n","buffer-chunks":"          function(head, req) {\n            send(\"bacon\");\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n              send(\"eggs\");\n            };\n            return \"tail\";\n          };\n","chunky":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row, i=0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early tail');\n              }\n            };\n          };\n"}}]
got: true
run: ["ddoc","foo",["lists","headers"],[{"total_rows":1000},{"q":"ok"}]]
got: ["start",["first chunk","second \"chunk\""],{"headers":{"Content-Type":"text/plain"}}]
run: ["list_end"]
got: ["end",["tail"]]
- should do headers proper

query server normal case ddoc list with rows
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"simple":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"early\";\n          };\n","headers":"          function(head, req) {\n            start({headers:{\"Content-Type\" : \"text\/plain\"}});\n            send(\"first chunk\");\n            send('second \"chunk\"');\n            return \"tail\";\n          };\n","rows":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n","buffer-chunks":"          function(head, req) {\n            send(\"bacon\");\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n              send(\"eggs\");\n            };\n            return \"tail\";\n          };\n","chunky":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row, i=0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early tail');\n              }\n            };\n          };\n"}}]
got: true
run: ["ddoc","foo",["lists","rows"],[{"foo":"bar"},{"q":"ok"}]]
got: ["log","about to getRow function"]
log: about to getRow function
got: ["start",["first chunk","ok"],{"headers":{}}]
run: ["list_row",{"key":"baz"}]
got: ["chunks",["baz"]]
run: ["list_row",{"key":"bam"}]
got: ["chunks",["bam"]]
run: ["list_end"]
got: ["end",["tail"]]
- should list em
run: ["ddoc","foo",["lists","rows"],[{"foo":"bar"},{"q":"ok"}]]
got: ["log","about to getRow function"]
log: about to getRow function
got: ["start",["first chunk","ok"],{"headers":{}}]
run: ["list_end"]
got: ["end",["tail"]]
- should work with zero rows

query server normal case ddoc list should buffer multiple chunks sent for a single row.
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"simple":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"early\";\n          };\n","headers":"          function(head, req) {\n            start({headers:{\"Content-Type\" : \"text\/plain\"}});\n            send(\"first chunk\");\n            send('second \"chunk\"');\n            return \"tail\";\n          };\n","rows":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n","buffer-chunks":"          function(head, req) {\n            send(\"bacon\");\n            var row;\n            log(\"about to getRow \" + typeof(getRow));\n            while(row = getRow()) {\n              send(row.key);\n              send(\"eggs\");\n            };\n            return \"tail\";\n          };\n","chunky":"          function(head, req) {\n            send(\"first chunk\");\n            send(req.q);\n            var row, i=0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early tail');\n              }\n            };\n          };\n"}}]
got: true
run: ["ddoc","foo",["lists","buffer-chunks"],[{"foo":"bar"},{"q":"ok"}]]
got: ["log","about to getRow function"]
log: about to getRow function
got: ["start",["bacon"],{"headers":{}}]
run: ["list_row",{"key":"baz"}]
got: ["chunks",["baz","eggs"]]
run: ["list_row",{"key":"bam"}]
got: ["chunks",["bam","eggs"]]
run: ["list_end"]
got: ["end",["tail"]]
- should should buffer em

query server that exits only goes to 2 list
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"capped":"          function(head, req) {\n            send(\"bacon\")\n            var row, i = 0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early');\n              }\n            };\n          }\n","raw":"          function(head, req) {\n            \/\/ log(this.toSource());\n            \/\/ log(typeof send);\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n"},"shows":{"fatal":"      function() {\n        throw([\"fatal\",\"error_key\",\"testing\"]);\n      }\n"}}]
got: true
run: ["ddoc","foo",["lists","capped"],[{"foo":"bar"},{"q":"ok"}]]
got: ["start",["bacon"],{"headers":{}}]
run: ["list_row",{"key":"baz"}]
got: ["chunks",["baz"]]
run: ["list_row",{"key":"foom"}]
got: ["chunks",["foom"]]
run: ["list_row",{"key":"fooz"}]
got: ["end",["fooz","early"]]
run: ["list_row",{"key":"foox"}]
got: ["error","unknown_command","unknown command 'list_row'"]
run: ["reset"]
got: 
- should exit if erlang sends too many rows

query server that exits raw list
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"capped":"          function(head, req) {\n            send(\"bacon\")\n            var row, i = 0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early');\n              }\n            };\n          }\n","raw":"          function(head, req) {\n            \/\/ log(this.toSource());\n            \/\/ log(typeof send);\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n"},"shows":{"fatal":"      function() {\n        throw([\"fatal\",\"error_key\",\"testing\"]);\n      }\n"}}]
got: true
run: ["ddoc","foo",["lists","raw"],[{"foo":"bar"},{"q":"ok"}]]
got: ["start",["first chunk","ok"],{"headers":{}}]
run: ["reset"]
got: ["error","list_error","not a row 'reset'"]
run: ["reset"]
got: 
- should exit if it gets a non-row in the middle

query server that exits fatal error
launching /opt/local/bin/couchjs /opt/local/share/couchdb/server/main.js
run: ["ddoc","new","foo",{"_id":"foo","lists":{"capped":"          function(head, req) {\n            send(\"bacon\")\n            var row, i = 0;\n            while(row = getRow()) {\n              send(row.key);\n              i += 1;\n              if (i > 2) {\n                return('early');\n              }\n            };\n          }\n","raw":"          function(head, req) {\n            \/\/ log(this.toSource());\n            \/\/ log(typeof send);\n            send(\"first chunk\");\n            send(req.q);\n            var row;\n            while(row = getRow()) {\n              send(row.key);\n            };\n            return \"tail\";\n          };\n"},"shows":{"fatal":"      function() {\n        throw([\"fatal\",\"error_key\",\"testing\"]);\n      }\n"}}]
got: true
run: ["ddoc","foo",["shows","fatal"],[{"foo":"bar"},{"q":"ok"}]]
got: ["error","error_key","testing"]
run: ["reset"]
got: 
- should exit

thank you for using the tests
- for more info run with QS_TRACE=true or see query_server_spec.rb file header

Finished in 0.795655 seconds

25 examples, 0 failures
